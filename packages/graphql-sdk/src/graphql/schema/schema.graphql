"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
  pageCount: Int!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

enum PublicationState {
  LIVE
  PREVIEW
}

input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  ne: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notIn: [ID]
  between: [ID]
}

input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  eq: Boolean
  ne: Boolean
  startsWith: Boolean
  endsWith: Boolean
  contains: Boolean
  notContains: Boolean
  containsi: Boolean
  notContainsi: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  null: Boolean
  notNull: Boolean
  in: [Boolean]
  notIn: [Boolean]
  between: [Boolean]
}

input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  ne: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
  between: [String]
}

input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  ne: Int
  startsWith: Int
  endsWith: Int
  contains: Int
  notContains: Int
  containsi: Int
  notContainsi: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: [Int]
}

input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  ne: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: [Float]
}

input DateTimeFilterInput {
  and: [DateTime]
  or: [DateTime]
  not: DateTimeFilterInput
  eq: DateTime
  ne: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime]
  notIn: [DateTime]
  between: [DateTime]
}

input JSONFilterInput {
  and: [JSON]
  or: [JSON]
  not: JSONFilterInput
  eq: JSON
  ne: JSON
  startsWith: JSON
  endsWith: JSON
  contains: JSON
  notContains: JSON
  containsi: JSON
  notContainsi: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  null: Boolean
  notNull: Boolean
  in: [JSON]
  notIn: [JSON]
  between: [JSON]
}

enum ENUM_COMPONENTCONTENTDOWNLOAD_PLATFORM {
  Windows
  MacOS
  Linux
}

enum ENUM_COMPONENTCONTENTDOWNLOAD_ARCHITECTURE {
  none
  x86
  x64
  arm
}

input ComponentContentDownloadFiltersInput {
  version: StringFilterInput
  tested: BooleanFilterInput
  easyRPG: BooleanFilterInput
  language: LanguageFiltersInput
  and: [ComponentContentDownloadFiltersInput]
  or: [ComponentContentDownloadFiltersInput]
  not: ComponentContentDownloadFiltersInput
}

input ComponentContentDownloadInput {
  id: ID
  platform: ENUM_COMPONENTCONTENTDOWNLOAD_PLATFORM
  architecture: ENUM_COMPONENTCONTENTDOWNLOAD_ARCHITECTURE
  file: ID
  version: String
  tested: Boolean
  easyRPG: Boolean
  language: ID
}

type ComponentContentDownload {
  id: ID!
  platform: ENUM_COMPONENTCONTENTDOWNLOAD_PLATFORM!
  architecture: ENUM_COMPONENTCONTENTDOWNLOAD_ARCHITECTURE!
  file: UploadFileEntityResponse!
  version: String
  tested: Boolean
  easyRPG: Boolean
  language: LanguageEntityResponse
}

input UploadFileFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  alternativeText: StringFilterInput
  caption: StringFilterInput
  width: IntFilterInput
  height: IntFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  ext: StringFilterInput
  mime: StringFilterInput
  size: FloatFilterInput
  url: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFileFiltersInput]
  or: [UploadFileFiltersInput]
  not: UploadFileFiltersInput
}

input UploadFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
}

type UploadFile {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFileEntity {
  id: ID
  attributes: UploadFile
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

input I18NLocaleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [I18NLocaleFiltersInput]
  or: [I18NLocaleFiltersInput]
  not: I18NLocaleFiltersInput
}

type I18NLocale {
  name: String
  code: String
  createdAt: DateTime
  updatedAt: DateTime
}

type I18NLocaleEntity {
  id: ID
  attributes: I18NLocale
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  id: IDFilterInput
  action: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  or: [UsersPermissionsPermissionFiltersInput]
  not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
  action: String!
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  id: ID
  attributes: UsersPermissionsPermission
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRoleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  type: StringFilterInput
  permissions: UsersPermissionsPermissionFiltersInput
  users: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsRoleFiltersInput]
  or: [UsersPermissionsRoleFiltersInput]
  not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsRoleEntity {
  id: ID
  attributes: UsersPermissionsRole
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  id: IDFilterInput
  username: StringFilterInput
  email: StringFilterInput
  provider: StringFilterInput
  password: StringFilterInput
  resetPasswordToken: StringFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  blocked: BooleanFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsUserFiltersInput]
  or: [UsersPermissionsUserFiltersInput]
  not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsUserEntity {
  id: ID
  attributes: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

input DeveloperFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  games: GameFiltersInput
  email: StringFilterInput
  website: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  localizations: DeveloperFiltersInput
  locale: StringFilterInput
  and: [DeveloperFiltersInput]
  or: [DeveloperFiltersInput]
  not: DeveloperFiltersInput
}

input DeveloperInput {
  name: String
  description: String
  avatar: ID
  games: [ID]
  email: String
  website: String
}

type Developer {
  name: String!
  description: String
  avatar: UploadFileEntityResponse
  games(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): GameRelationResponseCollection
  email: String
  website: String
  createdAt: DateTime
  updatedAt: DateTime
  localizations(filters: DeveloperFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): DeveloperRelationResponseCollection
  locale: String
}

type DeveloperEntity {
  id: ID
  attributes: Developer
}

type DeveloperEntityResponse {
  data: DeveloperEntity
}

type DeveloperEntityResponseCollection {
  data: [DeveloperEntity!]!
  meta: ResponseCollectionMeta!
}

type DeveloperRelationResponseCollection {
  data: [DeveloperEntity!]!
}

input EngineFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  games: GameFiltersInput
  slug: StringFilterInput
  website: StringFilterInput
  source: StringFilterInput
  steam: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  localizations: EngineFiltersInput
  locale: StringFilterInput
  and: [EngineFiltersInput]
  or: [EngineFiltersInput]
  not: EngineFiltersInput
}

input EngineInput {
  name: String
  description: String
  games: [ID]
  slug: String
  website: String
  source: String
  steam: String
}

type Engine {
  name: String!
  description: String!
  games(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): GameRelationResponseCollection
  slug: String!
  website: String
  source: String
  steam: String
  createdAt: DateTime
  updatedAt: DateTime
  localizations(filters: EngineFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): EngineRelationResponseCollection
  locale: String
}

type EngineEntity {
  id: ID
  attributes: Engine
}

type EngineEntityResponse {
  data: EngineEntity
}

type EngineEntityResponseCollection {
  data: [EngineEntity!]!
  meta: ResponseCollectionMeta!
}

type EngineRelationResponseCollection {
  data: [EngineEntity!]!
}

input GameFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  summary: StringFilterInput
  description: StringFilterInput
  website: StringFilterInput
  engine: EngineFiltersInput
  developer: DeveloperFiltersInput
  genre: GenreFiltersInput
  tags: TagFiltersInput
  slug: StringFilterInput
  ageRecommendation: IntFilterInput
  source: StringFilterInput
  dynRPG: BooleanFilterInput
  rating: IntFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  localizations: GameFiltersInput
  locale: StringFilterInput
  and: [GameFiltersInput]
  or: [GameFiltersInput]
  not: GameFiltersInput
}

input GameInput {
  name: String
  summary: String
  description: String
  gallery: [ID]
  banner: ID
  website: String
  engine: ID
  developer: ID
  genre: ID
  downloads: [ComponentContentDownloadInput]
  tags: [ID]
  slug: String
  ageRecommendation: Int
  source: String
  dynRPG: Boolean
  rating: Int
  publishedAt: DateTime
}

type Game {
  name: String!
  summary: String!
  description: String
  gallery(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  banner: UploadFileEntityResponse
  website: String
  engine: EngineEntityResponse
  developer: DeveloperEntityResponse
  genre: GenreEntityResponse
  downloads(filters: ComponentContentDownloadFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentContentDownload]
  tags(filters: TagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagRelationResponseCollection
  slug: String!
  ageRecommendation: Int!
  source: String
  dynRPG: Boolean
  rating: Int
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  localizations(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): GameRelationResponseCollection
  locale: String
}

type GameEntity {
  id: ID
  attributes: Game
}

type GameEntityResponse {
  data: GameEntity
}

type GameEntityResponseCollection {
  data: [GameEntity!]!
  meta: ResponseCollectionMeta!
}

type GameRelationResponseCollection {
  data: [GameEntity!]!
}

input GenreFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  games: GameFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  localizations: GenreFiltersInput
  locale: StringFilterInput
  and: [GenreFiltersInput]
  or: [GenreFiltersInput]
  not: GenreFiltersInput
}

input GenreInput {
  name: String
  description: String
  games: [ID]
  publishedAt: DateTime
}

type Genre {
  name: String!
  description: String
  games(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): GameRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  localizations(filters: GenreFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): GenreRelationResponseCollection
  locale: String
}

type GenreEntity {
  id: ID
  attributes: Genre
}

type GenreEntityResponse {
  data: GenreEntity
}

type GenreEntityResponseCollection {
  data: [GenreEntity!]!
  meta: ResponseCollectionMeta!
}

type GenreRelationResponseCollection {
  data: [GenreEntity!]!
}

input LanguageFiltersInput {
  id: IDFilterInput
  language: StringFilterInput
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  localizations: LanguageFiltersInput
  locale: StringFilterInput
  and: [LanguageFiltersInput]
  or: [LanguageFiltersInput]
  not: LanguageFiltersInput
}

input LanguageInput {
  language: String
  code: String
}

type Language {
  language: String!
  code: String!
  createdAt: DateTime
  updatedAt: DateTime
  localizations(filters: LanguageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): LanguageRelationResponseCollection
  locale: String
}

type LanguageEntity {
  id: ID
  attributes: Language
}

type LanguageEntityResponse {
  data: LanguageEntity
}

type LanguageEntityResponseCollection {
  data: [LanguageEntity!]!
  meta: ResponseCollectionMeta!
}

type LanguageRelationResponseCollection {
  data: [LanguageEntity!]!
}

input TagFiltersInput {
  id: IDFilterInput
  tag: StringFilterInput
  games: GameFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  localizations: TagFiltersInput
  locale: StringFilterInput
  and: [TagFiltersInput]
  or: [TagFiltersInput]
  not: TagFiltersInput
}

input TagInput {
  tag: String
  games: [ID]
}

type Tag {
  tag: String!
  games(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): GameRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  localizations(filters: TagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagRelationResponseCollection
  locale: String
}

type TagEntity {
  id: ID
  attributes: Tag
}

type TagEntityResponse {
  data: TagEntity
}

type TagEntityResponseCollection {
  data: [TagEntity!]!
  meta: ResponseCollectionMeta!
}

type TagRelationResponseCollection {
  data: [TagEntity!]!
}

union GenericMorph = ComponentContentDownload | UploadFile | I18NLocale | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser | Developer | Engine | Game | Genre | Language | Tag

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input PaginationArg {
  page: Int
  pageSize: Int
  start: Int
  limit: Int
}

type Query {
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
  developer(id: ID, locale: I18NLocaleCode): DeveloperEntityResponse
  developers(filters: DeveloperFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], locale: I18NLocaleCode): DeveloperEntityResponseCollection
  engine(id: ID, locale: I18NLocaleCode): EngineEntityResponse
  engines(filters: EngineFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], locale: I18NLocaleCode): EngineEntityResponseCollection
  game(id: ID, locale: I18NLocaleCode): GameEntityResponse
  games(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE, locale: I18NLocaleCode): GameEntityResponseCollection
  genre(id: ID, locale: I18NLocaleCode): GenreEntityResponse
  genres(filters: GenreFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE, locale: I18NLocaleCode): GenreEntityResponseCollection
  language(id: ID, locale: I18NLocaleCode): LanguageEntityResponse
  languages(filters: LanguageFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], locale: I18NLocaleCode): LanguageEntityResponseCollection
  tag(id: ID, locale: I18NLocaleCode): TagEntityResponse
  tags(filters: TagFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], locale: I18NLocaleCode): TagEntityResponseCollection
  me: UsersPermissionsMe
}

type Mutation {
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  updateUploadFile(id: ID!, data: UploadFileInput!): UploadFileEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  createDeveloper(data: DeveloperInput!, locale: I18NLocaleCode): DeveloperEntityResponse
  updateDeveloper(id: ID!, data: DeveloperInput!, locale: I18NLocaleCode): DeveloperEntityResponse
  deleteDeveloper(id: ID!, locale: I18NLocaleCode): DeveloperEntityResponse
  createEngine(data: EngineInput!, locale: I18NLocaleCode): EngineEntityResponse
  updateEngine(id: ID!, data: EngineInput!, locale: I18NLocaleCode): EngineEntityResponse
  deleteEngine(id: ID!, locale: I18NLocaleCode): EngineEntityResponse
  createGame(data: GameInput!, locale: I18NLocaleCode): GameEntityResponse
  updateGame(id: ID!, data: GameInput!, locale: I18NLocaleCode): GameEntityResponse
  deleteGame(id: ID!, locale: I18NLocaleCode): GameEntityResponse
  createGenre(data: GenreInput!, locale: I18NLocaleCode): GenreEntityResponse
  updateGenre(id: ID!, data: GenreInput!, locale: I18NLocaleCode): GenreEntityResponse
  deleteGenre(id: ID!, locale: I18NLocaleCode): GenreEntityResponse
  createLanguage(data: LanguageInput!, locale: I18NLocaleCode): LanguageEntityResponse
  updateLanguage(id: ID!, data: LanguageInput!, locale: I18NLocaleCode): LanguageEntityResponse
  deleteLanguage(id: ID!, locale: I18NLocaleCode): LanguageEntityResponse
  createTag(data: TagInput!, locale: I18NLocaleCode): TagEntityResponse
  updateTag(id: ID!, data: TagInput!, locale: I18NLocaleCode): TagEntityResponse
  deleteTag(id: ID!, locale: I18NLocaleCode): TagEntityResponse
  upload(refId: ID, ref: String, field: String, info: FileInfoInput, file: Upload!): UploadFileEntityResponse!
  multipleUpload(refId: ID, ref: String, field: String, files: [Upload]!): [UploadFileEntityResponse]!
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  removeFile(id: ID!): UploadFileEntityResponse
  createDeveloperLocalization(id: ID, data: DeveloperInput, locale: I18NLocaleCode): DeveloperEntityResponse
  createEngineLocalization(id: ID, data: EngineInput, locale: I18NLocaleCode): EngineEntityResponse
  createGameLocalization(id: ID, data: GameInput, locale: I18NLocaleCode): GameEntityResponse
  createGenreLocalization(id: ID, data: GenreInput, locale: I18NLocaleCode): GenreEntityResponse
  createLanguageLocalization(id: ID, data: LanguageInput, locale: I18NLocaleCode): LanguageEntityResponse
  createTagLocalization(id: ID, data: TagInput, locale: I18NLocaleCode): TagEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Update an existing role"""
  updateUsersPermissionsRole(id: ID!, data: UsersPermissionsRoleInput!): UsersPermissionsUpdateRolePayload

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!

  """Update an existing user"""
  updateUsersPermissionsUser(id: ID!, data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!

  """Update an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
